package com.project.gugumarket.controller;

import com.project.gugumarket.entity.User;
import com.project.gugumarket.repository.UserRepository;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Optional;

@Controller
public class MainController {

    private final UserRepository userRepository;

<<<<<<< HEAD
    public MainController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    // Î©îÏù∏ ÌéòÏù¥ÏßÄ
    @GetMapping("/main")
    public String main(Model model) {
        // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
=======
    /**
     * Î©îÏù∏ ÌéòÏù¥ÏßÄ (ÌéòÏù¥Ïßï + Í≤ÄÏÉâ + Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞)
     */
    @GetMapping("/main")
    public String main(
            Model model,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "12") int size,
            @RequestParam(required = false) Long categoryId,
            @RequestParam(required = false) String keyword
    ) {
        System.out.println("========== Î©îÏù∏ ÌéòÏù¥ÏßÄ ÏãúÏûë ==========");
        System.out.println("üìÑ ÌéòÏù¥ÏßÄ: " + page + ", ÏÇ¨Ïù¥Ï¶à: " + size);
        System.out.println("üìÇ Ïπ¥ÌÖåÍ≥†Î¶¨: " + categoryId);
        System.out.println("üîç Í≤ÄÏÉâÏñ¥: " + keyword);

>>>>>>> 99e0d3e7d634953e5cc34f25606565e61d769023
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String username = authentication.getName();

        System.out.println("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ - ÏÇ¨Ïö©Ïûê: " + username);

        model.addAttribute("username", username);
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º DBÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
        Optional<User> userOpt = userRepository.findByUserName(username);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            model.addAttribute("user", user);
            model.addAttribute("username", user.getUserName());
            System.out.println("‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú ÏôÑÎ£å: " + user.getNickname());
        }

<<<<<<< HEAD
=======
        Pageable pageable = PageRequest.of(page, size);

        Page<ProductForm> products;
        if (categoryId != null) {
            products = productService.getProductsByCategory(categoryId, keyword, pageable);
            model.addAttribute("selectedCategoryId", categoryId);
        } else {
            products = productService.getProductList(keyword, pageable);
        }

        List<Category> categories = categoryRepository.findAll();
        System.out.println("üìÇ Ïπ¥ÌÖåÍ≥†Î¶¨ " + categories.size() + "Í∞ú Î°úÎìú");

        model.addAttribute("products", products);
        model.addAttribute("categories", categories);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", products.getTotalPages());
        model.addAttribute("totalElements", products.getTotalElements());
        model.addAttribute("keyword", keyword);

        System.out.println("‚úÖ ÏÉÅÌíà " + products.getContent().size() + "Í∞ú Ï°∞Ìöå ÏôÑÎ£å");
        System.out.println("üìä Ï†ÑÏ≤¥ ÏÉÅÌíà: " + products.getTotalElements() + "Í∞ú");
        System.out.println("üìÑ ÌòÑÏû¨ ÌéòÏù¥ÏßÄ: " + (page + 1) + " / " + products.getTotalPages());
        System.out.println("========================================");
>>>>>>> 99e0d3e7d634953e5cc34f25606565e61d769023

        return "main";
    }

<<<<<<< HEAD
    // Ìôà ÌéòÏù¥ÏßÄ (Î°úÍ∑∏Ïù∏ Ï†Ñ)
=======
>>>>>>> 99e0d3e7d634953e5cc34f25606565e61d769023
    @GetMapping("/")
    public String home() {
        return "index";
    }
}
